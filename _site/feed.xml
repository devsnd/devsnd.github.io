<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-23T14:35:05+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">fomori blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Repair the Syma X12S quadcopter by replacing the motors and rotor blades (and what to do if it does not lift off afterwards)</title><link href="http://localhost:4000/handycrafts/hardware/2015/10/19/Repair_the_Syma_X12S_quadcopter_by_replacing_the_motors_and_rotor_blades__and_what_to_do_if_it_does_not_lift_off_afterwards_.html" rel="alternate" type="text/html" title="Repair the Syma X12S quadcopter by replacing the motors and rotor blades (and what to do if it does not lift off afterwards)" /><published>2015-10-19T23:21:36+02:00</published><updated>2015-10-19T23:21:36+02:00</updated><id>http://localhost:4000/handycrafts/hardware/2015/10/19/Repair_the_Syma_X12S_quadcopter_by_replacing_the_motors_and_rotor_blades__and_what_to_do_if_it_does_not_lift_off_afterwards_</id><content type="html" xml:base="http://localhost:4000/handycrafts/hardware/2015/10/19/Repair_the_Syma_X12S_quadcopter_by_replacing_the_motors_and_rotor_blades__and_what_to_do_if_it_does_not_lift_off_afterwards_.html">&lt;h1 id=&quot;repair-the-syma-x12s-quadcopter-by-replacing-the-motors-and-rotor-blades-and-what-to-do-if-it-does-not-lift-off-afterwards&quot;&gt;Repair the Syma X12S quadcopter by replacing the motors and rotor blades (and what to do if it does not lift off afterwards)&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/10/Cover.png&quot;&gt;&lt;img src=&quot;/assets/2015-10-19-Repair the Syma X12S quadcopter by replacing the motors and rotor blades (and what to do if it does not lift off afterwards)/Cover-300x213.png&quot; alt=&quot;Syma X12S quadcopter with new motors&quot; /&gt;&lt;/a&gt;My friend owns a Syma X12S &lt;a href=&quot;https://en.wikipedia.org/wiki/Quadcopter&quot; title=&quot;en.wikipedia.org - quadcopter&quot;&gt;quadcopter&lt;/a&gt; that was cheaply imported from China. It really is an amazing piece of hardware and the perfect entertainment when you spend an evening with friends. Piloting this miniature aircraft is quite easy – it only takes a few flying sessions until you acquired enough skills to handle it. However, I still managed to crash the quadcopter in a way that damaged two of its four motors. The beauty of this toy is its modular design: Even though it is a cheap product, most of the parts are &lt;a href=&quot;https://en.wikipedia.org/wiki/Line-replaceable_unit&quot; title=&quot;en.wikipedia.org - Line-replaceable unit&quot;&gt;LRU&lt;/a&gt;s, so you can simply order a replacement for the defect part and replace it yourself.&lt;/p&gt;

&lt;p&gt;This short post shows how to replace the motors of a Syma X12S quadcopter and highlights some difficulties to look out for.&lt;/p&gt;

&lt;h1 id=&quot;replacing-the-motors&quot;&gt;Replacing the motors&lt;/h1&gt;

&lt;p&gt;The Syma X12S quadcopter has two pairs of motors, two spinning in one direction and two spinning in the opposite direction. Both motor pairs are placed diagonally in the quadcopter mount positions (see items 04 and 05 in the exploded assembly drawing below). This design concept accounts for the spin moment of each rotor, assuring an equilibrium on the overall spin moment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/10/Exploded-assembly-drawing.png&quot;&gt;&lt;img src=&quot;/assets/2015-10-19-Repair the Syma X12S quadcopter by replacing the motors and rotor blades (and what to do if it does not lift off afterwards)/Exploded-assembly-drawing-237x300.png&quot; alt=&quot;Exploded assembly drawing - modular design&quot; /&gt;&lt;/a&gt;Replacing any part of this quadcopter model is straight forward, even for people that are not so technically gifted: The only tools needed are a small &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_screw_drives&quot; title=&quot;en.wikipedia.org - List of screw drives&quot;&gt;Phillips screw drive&lt;/a&gt; and basic soldering equipment. To get access to the motors you only need to remove three parts. First, the rotor blades of the motors need to be removed:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/10/Rotor-blades-removed.png&quot;&gt;&lt;img src=&quot;/assets/2015-10-19-Repair the Syma X12S quadcopter by replacing the motors and rotor blades (and what to do if it does not lift off afterwards)/Rotor-blades-removed-300x283.png&quot; alt=&quot;Rotor blades removed&quot; /&gt;&lt;/a&gt;They are simply pushed onto the motor shaft, creating a frictional connection. So just reverse the process by pulling them off again. Do not pull on the blades, as they bend and break easily. Instead grab the rotors at the hub.&lt;/p&gt;

&lt;p&gt;Next, the bottom cover plate needs to be removed, which is held in place by four screws:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/10/Buttom-cover-plate.png&quot;&gt;&lt;img src=&quot;/assets/2015-10-19-Repair the Syma X12S quadcopter by replacing the motors and rotor blades (and what to do if it does not lift off afterwards)/Buttom-cover-plate-300x198.png&quot; alt=&quot;Buttom cover plate&quot; /&gt;&lt;/a&gt;Then, remove the chassis parts that cover each motor, which serve as a rotor blade protection and landing gear. Only remove the one(s) on the motor(s) you want to replace. This is probably the most delicate step: Theses parts are kept in place by two tiny clips each. Removing the part without breaking the clips requires a little patience and a steady hand – I ripped one off right away. If you break one of the clips, the part will not be held in place anymore after reassembly (later in this guide). Applying adhesive or a tiny drop of &lt;a href=&quot;https://en.wikipedia.org/wiki/Hot-melt_adhesive&quot; title=&quot;en.wikipedia.org - Hot-melt adhesive&quot;&gt;hot glue&lt;/a&gt; will fix this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/10/Quadcopter-opened.png&quot;&gt;&lt;img src=&quot;/assets/2015-10-19-Repair the Syma X12S quadcopter by replacing the motors and rotor blades (and what to do if it does not lift off afterwards)/Quadcopter-opened-282x300.png&quot; alt=&quot;Quadcopter opened and ready for motor repair&quot; /&gt;&lt;/a&gt;The Picture above shows the motors ready for removal. They are simply pushed into the chassis (no adhesive is applied) and the two wires are soldered to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Printed_circuit_board&quot; title=&quot;en.wikipedia.org - Printed circuit board&quot;&gt;PCB&lt;/a&gt;. When replacing the motors, make sure to swap it with the correct motor type (The “normal” or counter-spinning motors can easily be distinguished by their wire coloring).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/10/Motor.png&quot;&gt;&lt;img src=&quot;/assets/2015-10-19-Repair the Syma X12S quadcopter by replacing the motors and rotor blades (and what to do if it does not lift off afterwards)/Motor-300x208.png&quot; alt=&quot;Motor close-up&quot; /&gt;&lt;/a&gt;Finally, reverse the steps above to reassemble the quadcopter again.&lt;/p&gt;

&lt;h1 id=&quot;difficulties-to-look-out-for&quot;&gt;Difficulties to look out for&lt;/h1&gt;

&lt;h3 id=&quot;never-rotate-the-rotors-manually&quot;&gt;Never rotate the rotors manually&lt;/h3&gt;

&lt;p&gt;Rotating the motors manually (with your hand or by blowing on the blades) should be avoided. Manually rotating electrical motors &lt;a href=&quot;https://en.wikipedia.org/wiki/Electromagnetic_induction&quot; title=&quot;en.wikipedia.org - Electromagnetic induction&quot;&gt;induces voltage&lt;/a&gt; in the circuity. Although most (good) circuits have protection against this phenomenon, it is good practice not to do so.&lt;/p&gt;

&lt;h3 id=&quot;motor-cable-length&quot;&gt;Motor cable length&lt;/h3&gt;

&lt;p&gt;The length of the cables is just enough to push the motors into the mounting positions in the chassis &lt;em&gt;after&lt;/em&gt; soldering the wires. However, twisting them is not possible then, which makes the bottom cover plate not fit that easily anymore. So ideally, install the motors first and solder the wires last.&lt;/p&gt;

&lt;h3 id=&quot;rotor-blade-form&quot;&gt;Rotor blade form&lt;/h3&gt;

&lt;p&gt;Your quadcopter does not lift off after repairing?&lt;/p&gt;

&lt;p&gt;Since there are two different motor types spinning in different directions, it is clear that they need different rotor blade forms to create lift (see the exploded assembly drawing shown earlier in this post). The shipped rotor blades came in two different colors (black and white) so I thought that each color marked one of the two rotor forms – why else would there be two black and two white rotors? Well, this was not the case. The rotor color has nothing to do with its form! That was quite confusing to me. So make sure to fit the right rotor blades on each motor.&lt;/p&gt;</content><author><name></name></author><category term="Handycrafts" /><category term="Hardware" /><summary type="html">Repair the Syma X12S quadcopter by replacing the motors and rotor blades (and what to do if it does not lift off afterwards)</summary></entry><entry><title type="html">Low-Latency Live Streaming your Desktop using ffmpeg</title><link href="http://localhost:4000/linux/software/2015/08/02/Low_Latency_Live_Streaming_your_Desktop_using_ffmpeg.html" rel="alternate" type="text/html" title="Low-Latency Live Streaming your Desktop using ffmpeg" /><published>2015-08-02T15:43:34+02:00</published><updated>2015-08-02T15:43:34+02:00</updated><id>http://localhost:4000/linux/software/2015/08/02/Low_Latency_Live_Streaming_your_Desktop_using_ffmpeg</id><content type="html" xml:base="http://localhost:4000/linux/software/2015/08/02/Low_Latency_Live_Streaming_your_Desktop_using_ffmpeg.html">&lt;h1 id=&quot;low-latency-live-streaming-your-desktop-using-ffmpeg&quot;&gt;Low-Latency Live Streaming your Desktop using ffmpeg&lt;/h1&gt;

&lt;p&gt;I recently bought myself a projector, which I installed in one corner of the room. Unfortunately I didn’t buy a long enough HDMI cable with it, so I could not connect it to my desktop computer and instead used my loyal ThinkPad T60 for playback. But I also wanted to be able to play some games using the projector, for which my laptop wasn’t beefy enough. So I thought, why not just stream the games from my desktop computer to the laptop?&lt;/p&gt;

&lt;p&gt;In this post I will explore how to stream 720p (or any quality for that matter) from one computer to another using ffmpeg and netcat, with a latency below 100ms, which is good enough for many games. &lt;strong&gt;TL;DR; If you don’t care about the technical details, just &lt;a href=&quot;/blog/?p=1213#thesolution&quot;&gt;jump to the end of the post&lt;/a&gt; to try it out yourself.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The problem:&lt;/h1&gt;

&lt;p&gt;Streaming low-latency live content is quite hard, because most video codecs are designed to achieve the best compression and not best latency. This makes sense, because most movies are encoded once and decoded often, so it is a good trade-off to use more time for the encoding than the decoding.&lt;/p&gt;

&lt;p&gt;One way to save space or bandwidth is to compress different parts of a movie with varying quality. For example, the h264 encoder will compress fast moving scenes more than a slow scene, because the human eye will not be able to see all the detail in the fast moving scene anyway, while the viewer might inspect the image of a slow scene more thoroughly. But to do so, the encoder has first to find out if it is currently encoding a fast- or slow-moving scene.&lt;/p&gt;

&lt;p&gt;There are essentially two ways to find out if the content is fast- or slow-moving: The most commonly used method for non-live content is a so called two-pass encoding, in which the encoder first analyses the whole movie and then, in a second pass, encodes the movie using the information acquired before. Unfortunately this is not possible for live content. The second way to do this is to look ahead for a few frames in the movie material and then to decide adaptively whether this is a slow or a fast scene. Since it is not possible to look ahead in live material, the encoder has to buffer some frames before encoding them, so it can know what’s coming up next. This buffer however introduces latency in the ballpark of seconds rather than milliseconds, which makes it impossible to create an interactive live-stream using this technique. This also is a simplified example, since modern encoders can use multiple reference frames if the past and future of the current frame to reduce the redundancy of image data. These frames are called &lt;a href=&quot;https://en.wikipedia.org/wiki/Inter_frame#Typical_Group_Of_Pictures_.28GOP.29_structure&quot;&gt;GOP (group of pictures)&lt;/a&gt; and those will play a significant role to get to a sub-second latency stream.&lt;/p&gt;

&lt;p&gt;Because a low-latency live stream cannot afford the time to analyse the video material up front, live streamed content will always look worse than any other encoded content, and this can only be countered by using more bandwidth.&lt;/p&gt;

&lt;p&gt;I found some &lt;a href=&quot;http://smorgasbork.com/2009/12/03/real-time-mpeg-2-encoding-with-ffmpeg/&quot;&gt;blog posts that explain live-streaming&lt;/a&gt; in depth and most of them used the mpeg2video encoder, but most of them “only” wanted real-time encoding, but not necessarily low-latency. I achieved quite good results using mpeg2video, with the lowest latency of all the codecs I tried out, but also wanted to explore if I could achieve better image quality. So I tried out the x264 encoder using the “zerolatency” tuning. While the “zerolatency” tuning did help, I still had a huge latency, far from playing any game on a live stream. So I did a little digging and found a &lt;a href=&quot;https://web.archive.org/web/20150421033553/http://x264dev.multimedia.cx/archives/249&quot;&gt;thread on the x264dev forums, which I resurrected from the internet archive&lt;/a&gt;, in which a lot of additional x264 flags are discussed. The most important one to bring down the latency was to use the smallest possible vbv-bufsize (which is the encoder buffer). Another good advice is to use so called intra-refresh, which means that there aren’t any full key frames anymore, but instead contents of a key frame are transmitted in blocks over time. This means that there is not a burst of data to send for each key frame, but instead parts of the image are refreshed over time. To figure out if some option would improve the latency or not I needed a way to measure it.&lt;/p&gt;

&lt;p&gt;I wrote a quick script in python that would output the current time in milliseconds to measure the latency:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/python3
import time
import sys
while True:
    time.sleep(0.001)
    print(&apos;%s\r&apos; % (int(time.time() * 1000) % 10000), end=&apos;&apos;)
    sys.stdout.flush()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using this script, I would then encode and decode the stream on my desktop at the same time. Making a screenshot of both the original desktop and the streamed desktop next to it gives me the total system latency.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-08-02-Low-Latency Live Streaming your Desktop using ffmpeg/Screenshot_2015-08-02_14-31-16.png&quot;&gt;&lt;img src=&quot;/assets/2015-08-02-Low-Latency Live Streaming your Desktop using ffmpeg/Screenshot_2015-08-02_14-31-16.png&quot; alt=&quot;Screenshot_2015-08-02_14-31-16&quot; /&gt;&lt;/a&gt;On the the real desktop the time is at 6884, and on the right the streamed desktop it is at 6794. In this example the stream has a latency of about 90ms&lt;/p&gt;

&lt;p&gt;In this way I could measure if any changes I made really improved the latency of my video stream without the network overhead. This would not always be totally accurate, as ffmpeg might take a snapshot of the desktop just before a new image is rendered by the Xwindow system, but should not be too far off.
Using this measurement tool, I made a lot of changes to the encoder options, but at some point I hit a brick wall. I couldn’t get the latency down any further: The client side was buffering the stream as well! I used mplayer to playback my video stream and tried out all kinds of flags like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-nocache&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-framedrop&lt;/code&gt;. While all of them helped a bit, mplayer performed best when using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-benchmark&lt;/code&gt; flag… Which seems to bypass anything that is not part of the actual video decoding process, which is exactly what was needed.
After figuring out good settings for the encoder and decoder, I also tried out other transport streams like &lt;a href=&quot;https://en.wikipedia.org/wiki/Real-time_Transport_Protocol&quot;&gt;RTP&lt;/a&gt;, but &lt;a href=&quot;https://en.wikipedia.org/wiki/MPEG_transport_stream&quot;&gt;mpegts&lt;/a&gt; was the faster in my tests. I guess it would be possible to achieve even better latency using ffmpegs UDP stream instead sending the stream over TCP using netcat, but the UDP stream would break down after a few seconds, even on the local loopback, throwing around cryptic error messages about circular buffers…
The solution:
=============&lt;/p&gt;

&lt;h2 id=&quot;using-h264-okay-latency-better-image-quality-low-bandwidth-high-cpu-usage&quot;&gt;Using h264 (okay latency, better image quality, low bandwidth, high cpu usage)&lt;/h2&gt;

&lt;p&gt;The examples given here require at least 3000kbits/s or 3Mbit/s bandwidth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On the host:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg \
    -f x11grab -s 1280x720 -framerate 30 -i :0.0 \
    -c:v libx264 -preset veryfast -tune zerolatency -pix_fmt yuv444p \
    -x264opts crf=20:vbv-maxrate=3000:vbv-bufsize=100:intra-refresh=1:slice-max-size=1500:keyint=30:ref=1 \
    -f mpegts - | nc -l -p 9000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For further &lt;a href=&quot;https://sites.google.com/site/linuxencoding/x264-ffmpeg-mapping&quot;&gt;x264 options check out this guide&lt;/a&gt;. If you want to change them for your scenario, you always have to make sure that your&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vbv-bufsize = vbv-maxrate / framerate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so in this scenario, for 3000 vbv-maxrate, I chose a vbv-bufsize of 100 at 30 FPS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On the client:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc  9000 | mplayer -benchmark -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: always use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-benchmark&lt;/code&gt; flag on the client-side. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-framedrop&lt;/code&gt; might help as well, especially on slower clients.
Using mpeg2video (lowest latency, low image quality, high bandwidth, lower cpu usage)
————————————————————————————-&lt;/p&gt;

&lt;p&gt;Using mpeg2video, I could achieve almost no noticable latency, but the bandwidth requirements go through the roof, so this is only an option when you have either very fast WiFi or a LAN.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On the host, using about 16Mbit/s:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg \
    -f x11grab -s 1280x720 -framerate 30 -i :0.0    \
    -c:v mpeg2video -q:v 20 -pix_fmt yuv420p -g 1 -threads 2 \
    -f mpegts - | nc -l -p 9000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Increasing the -q:v setting will lower the quality and save some bandwidth and vice versa, setting it to a lower value will increase quality and bandwidth. Setting the quality to 2 gives a perfect image, but uses something around 150Mbit/s!&lt;/p&gt;

&lt;p&gt;The client is the same as above in the x264 example.&lt;/p&gt;

&lt;h2 id=&quot;extra-tips&quot;&gt;Extra tips:&lt;/h2&gt;

&lt;p&gt;If you have the spare network bandwidth and CPU time, you can double the frame rate to 60 and you’ll get another latency drop. Using mpeg2video and 60 FPS I achieved essentially zero latency on the local loopback device, so all that is left is network latency. Also, you can try out the ultrafast setting of x264, but this only made the image look worse while not helping too much with the performance.&lt;/p&gt;

&lt;p&gt;If you want to try to tweak this setup even further, you can pipe the host directly into the client instead of using the network, using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-quiet&lt;/code&gt; option of mplayer to see what the encoder is up to.&lt;/p&gt;

&lt;h1 id=&quot;all-for-nothing&quot;&gt;All for nothing&lt;/h1&gt;

&lt;p&gt;After all those tweaks, tests and setting everything up, streaming my desktop in 720p over WiFi to my laptop works very well. Unfortunately the input lag of the projector is extremely high in the “normal” mode and the so called “fast” mode or “gaming” mode cannot be turned on when using VGA as signal input. So I’ll have to wait until the HDMI cable arrives… bummer.&lt;/p&gt;</content><author><name></name></author><category term="Linux" /><category term="Software" /><summary type="html">Low-Latency Live Streaming your Desktop using ffmpeg</summary></entry><entry><title type="html">Fixing Full-HD VGA support for the Epson EH-TW5200 Projector</title><link href="http://localhost:4000/hardware/linux/2015/07/29/Fixing_Full_HD_VGA_support_for_the_Epson_EH_TW5200_Projector.html" rel="alternate" type="text/html" title="Fixing Full-HD VGA support for the Epson EH-TW5200 Projector" /><published>2015-07-29T00:05:36+02:00</published><updated>2015-07-29T00:05:36+02:00</updated><id>http://localhost:4000/hardware/linux/2015/07/29/Fixing_Full_HD_VGA_support_for_the_Epson_EH_TW5200_Projector</id><content type="html" xml:base="http://localhost:4000/hardware/linux/2015/07/29/Fixing_Full_HD_VGA_support_for_the_Epson_EH_TW5200_Projector.html">&lt;h1 id=&quot;fixing-full-hd-vga-support-for-the-epson-eh-tw5200-projector&quot;&gt;Fixing Full-HD VGA support for the Epson EH-TW5200 Projector&lt;/h1&gt;

&lt;p&gt;If you happen to own an Epson EH-TW5200 projector, you might have experienced problems setting Full-HD (1920×1080) resolution using a VGA connection under linux. When I set the resolution to Full-HD, the whole screen would stay completely black. This is just a quick fix for the other 4 people that might have this problem.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Create a new full-hd modeline setting using cvt
cvt 1920 1080 60
# copy the cvt output after the Modeline and add it to xrandr
xrandr --newmode &quot;1920x1080_60.00&quot;  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync
# make the mode available to the VGA output, in my case VGA-0
xrandr --addmode VGA-0 &quot;1920x1080_60.00&quot;
# now set the mode for the VGA output
xrandr --output VGA-0 --mode 1920x1080_60.00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The difference between the original modeline and the new one is the vertical refresh rate: The projector proposed 60.02 Hz via &lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Display_Identification_Data&quot;&gt;EDID&lt;/a&gt;, and the new modeline is just a tad slower, using 59.94 Hz. I was connecting a ThinkPad T60 to the projector, so the problem might also be the &lt;a href=&quot;https://en.wikipedia.org/wiki/RAMDAC&quot;&gt;RAMDAC&lt;/a&gt; of the laptop, something about &lt;a href=&quot;https://en.wikipedia.org/wiki/Video_Graphics_Array#Signal_timings&quot;&gt;blank phases&lt;/a&gt;, who knows.&lt;/p&gt;</content><author><name></name></author><category term="Hardware" /><category term="Linux" /><summary type="html">Fixing Full-HD VGA support for the Epson EH-TW5200 Projector</summary></entry><entry><title type="html">Homeserver Upgrade: Odroid XU3-Lite Setup on a SD-Card</title><link href="http://localhost:4000/hardware/linux/server/2015/04/24/Homeserver_Upgrade__Odroid_XU3_Lite_Setup_on_a_SD_Card.html" rel="alternate" type="text/html" title="Homeserver Upgrade: Odroid XU3-Lite Setup on a SD-Card" /><published>2015-04-24T18:32:22+02:00</published><updated>2015-04-24T18:32:22+02:00</updated><id>http://localhost:4000/hardware/linux/server/2015/04/24/Homeserver_Upgrade__Odroid_XU3_Lite_Setup_on_a_SD_Card</id><content type="html" xml:base="http://localhost:4000/hardware/linux/server/2015/04/24/Homeserver_Upgrade__Odroid_XU3_Lite_Setup_on_a_SD_Card.html">&lt;h1 id=&quot;homeserver-upgrade-odroid-xu3-lite-setup-on-a-sd-card&quot;&gt;Homeserver Upgrade: Odroid XU3-Lite Setup on a SD-Card&lt;/h1&gt;

&lt;p&gt;I recently bought a new home server, the &lt;a href=&quot;http://www.hardkernel.com/main/products/prdt_info.php?g_code=G141351880955&quot;&gt;Odroid XU3-Lite&lt;/a&gt; to replace my poor man’s home server I called &lt;a href=&quot;http://fomori.org/blog/?p=37&quot;&gt;the thin-server&lt;/a&gt;, to run &lt;a href=&quot;http://fomori.org/cherrymusic&quot;&gt;CherryMusic&lt;/a&gt; and the like.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-04-24-Homeserver Upgrade: Odroid XU3-Lite Setup on a SD-Card/20150116_120429_small.jpg&quot;&gt;&lt;img src=&quot;/assets/2015-04-24-Homeserver Upgrade: Odroid XU3-Lite Setup on a SD-Card/20150116_120429_small.jpg&quot; alt=&quot;20150116_120429_small&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That little ARM machine is a beast in the size of a cigarette pack, featuring a total of eight CPU cores, an ethernet port and most importantly an USB 3.0 port to connect an external hard drive. It also comes with a plastic case, with a small fan inside and a PSU that is strong enough to power external hard drives connected to the USB ports. I ordered the smaller “Lite” version, which has a slightly lower CPU clock rate, but costs a lot less than its bigger brother.&lt;/p&gt;

&lt;p&gt;In this post I’ll guide you quickly through the installation process of the ubuntu image on a micro SD-Card, how to make use of all the space on the microSD card and how to secure this little fellow a little after the installation of the image.&lt;/p&gt;

&lt;h2 id=&quot;installing-the-operating-system-image&quot;&gt;Installing the Operating System Image&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://com.odroid.com/sigong/nf_file_board/nfile_board.php?tag=ODROID-XU3&quot;&gt;Download the latest Linux image from their site&lt;/a&gt; and unpack it using xz:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ xz --decompress IMAGE_FILE.img.xz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The actual image file will of course be called something like ubuntu-14.04.1lts-lubuntu-odroid-xu3-20150212.img.xz and not IMAGE_FILE.img.xz.&lt;/p&gt;

&lt;p&gt;Then plug in the SD Card into you linux computer and check out were it was mounted using dmesg.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dmesg | tail
... some other output ...
[ 6060.833668] sd 8:0:0:1: [sdX] Attached SCSI removable disk
[ 6077.944503] sd 8:0:0:1: [sdX] 60874752 512-byte logical blocks: (31.1 GB/29.0 GiB)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see something like sdb or sdc in the output, make sure that you got the letter right; I will use sdX as a placeholder. As you can see I bought a 32 GB SD Card so I would never have to worry what I install on the machine, because there will be more than enough room for it. Also make sure you’re buying a quality SD-Card with fast write rates for better performance.&lt;/p&gt;

&lt;p&gt;Now you can copy the image onto the SD-Card.&lt;/p&gt;

&lt;p&gt;Warning: All the data on the SD-Card will be lost forever in this process so make sure this SD-Card does not contain any bitcoins or wedding photos you might miss later!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dd if=IMAGE_FILE.img of=/dev/sdX bs=128k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Depending on your SD-Card this process may take some minutes and dd will not give you any indication of the progress so be patient.&lt;/p&gt;

&lt;p&gt;Before you can actually boot from the microSD card, make sure the correct boot mode is set. The ODROID XU3-Lite can either boot from a microSD card or from a eMMC module. There is a tiny switch on the board, to set the the boot mode as explained in the &lt;a href=&quot;http://odroid.com/dokuwiki/doku.php?id=en:xu3_bootmode_configuration&quot;&gt;ODROID wiki&lt;/a&gt;, which I found a bit confusing to be honest. Set the switch as shown in the picture below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-04-24-Homeserver Upgrade: Odroid XU3-Lite Setup on a SD-Card/Diagram1.jpeg&quot;&gt;&lt;img src=&quot;/assets/2015-04-24-Homeserver Upgrade: Odroid XU3-Lite Setup on a SD-Card/Diagram1.jpeg&quot; alt=&quot;Diagram1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can insert the microSD card and plug it is and it should boot up in about 20 seconds, and automatically connect to your network using DHCP.&lt;/p&gt;

&lt;p&gt;Now you can login your new system using SSH from your linux computer (in my case it had the IP 192.168.1.87, but you might need to login to your router to find out what IP the ODROID received):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@192.168.1.87
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As always with new SSH connections:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Are you sure you want to continue connecting (yes/no)?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enter “yes” to proceed. The default password is &lt;strong&gt;odroid&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, let’s check how much space I have left on the SD card.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@odroid:~# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/mmcblk0p2  4.9G  4.4G  313M  94% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
udev            747M  4.0K  747M   1% /dev
tmpfs           998M  4.0K  998M   1% /tmp
tmpfs           200M  2.6M  197M   2% /run
none            5.0M     0  5.0M   0% /run/lock
none            998M   72K  998M   1% /run/shm
none            100M   20K  100M   1% /run/user
/dev/mmcblk0p1  129M  5.1M  124M   4% /media/boot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Only some hundred megabytes? Well, thats because the image I flashed onto the SD card also contains the partition layout and the contained file systems, which is as small as possible, so people can use this image also on smaller SD cards. So let’s change that.&lt;/p&gt;

&lt;p&gt;First off, partitions are not the same as file systems! So we need to resize the partitions to match the SD card first, and then resize the filesystem to match the partitions.&lt;/p&gt;

&lt;h2 id=&quot;resize-the-partitions&quot;&gt;Resize the partitions&lt;/h2&gt;

&lt;p&gt;Since the image was about 6 GB in size, but I bought a 32 GB micro SD card there is a lot of space to be gained. Doing this on a live system is far from a good idea, but since this is the stock system, I don’t care; There’s no data to be lost. Never do this on a system with data you (or somebody else) care about.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@odroid:~# fdisk -l
 
Disk /dev/mmcblk0: 31.2 GB, 31167873024 bytes
4 heads, 16 sectors/track, 951168 cylinders, total 60874752 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x000c4046
 
Device Boot              Start         End      Blocks   Id  System
/dev/mmcblk0p1            3072      266239      131584    6  FAT16
/dev/mmcblk0p2          266240    10915839     5324800   83  Linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we’ve got 2 partitions here. The first one (/dev/mmcblk0p1) contains the bootloader and the second one contains our ubuntu linux system. By the way: If you ever wondered, mmcblk0p1 stands for Multi Media Card Block Device 0 Part 1. Makes it a bit easier to remember. Let’s write down the total size of the SD card in cylinders somewhere.&lt;/p&gt;

&lt;p&gt;So let’s fire up parted to and first check the partition numbers using &lt;em&gt;print.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@odroid:~# parted /dev/mmcblk0
GNU Parted 2.3
Using /dev/mmcblk0
Welcome to GNU Parted! Type &apos;help&apos; to view a list of commands.           
(parted) print
Model: SD SD32G (sd/mmc)
Disk /dev/mmcblk0: 31.2GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Number  Start   End     Size    Type     File system  Flags
 1      1573kB  136MB   135MB   primary  fat16
 2      136MB   5589MB  5453MB  primary  ext4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we set the unit used by parted to cyl, so when we resize, we can enter the number of total cylinders of the card we wrote down earlier when using fdisk.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(parted) unit cyl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can resize the partition 2 (which contains the ext4 filesystem) to use all the available space:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(parted) resizepart 2                                         
Warning: Partition /dev/mmcblk0p2 is being used. Are you sure you want to continue?
Yes/No? yes                                                               
End?  [170559cyl]? 951168
(parted) quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alright, so now the partition ends at the end of the SD card.&lt;/p&gt;

&lt;h2 id=&quot;resize-the-file-system&quot;&gt;Resize the file system&lt;/h2&gt;

&lt;p&gt;Now we can resize the filesystem to the size of the enlarged partition using resize2fs:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resize2fs /dev/mmcblk0p2
resize2fs 1.42.9 (4-Feb-2014)
Filesystem at /dev/mmcblk0p2 is mounted on /; on-line resizing required
old_desc_blocks = 1, new_desc_blocks = 2
The filesystem on /dev/mmcblk0p2 is now 7576064 blocks long.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So let’s check the space again:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@odroid:~# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/mmcblk0p2   29G  4.4G   24G  16% /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bam. Now with so much space available, lets fill it with pictures of squirrels. Sometimes I’m overwhelmed by the sheer awesomeness of linux.&lt;/p&gt;

&lt;h2 id=&quot;create-local-user-and-disable-root-user-login&quot;&gt;Create local user and Disable root user login:&lt;/h2&gt;

&lt;p&gt;As seen before, your home server can be easily accessed using the default root login, which is not so nice. So lets add another user to login with and also make sure nobody can ssh into the server using the root user.&lt;/p&gt;

&lt;p&gt;First add a new user and put that user into the sudo group, so this user can issue all kinds of system commands.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ adduser USERNAME
$ usermod -a -G sudo USERNAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, before we block ssh access for the root user, make sure you can login to the server and execute sudo using the newly created user, or you have locked yourself out of the system!&lt;/p&gt;

&lt;p&gt;Now edit /etc/ssh/sshd_config to disable the root login, using any command line text editor (I’m using nano in this case):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now set  PermitRootLogin to No:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you have saved the file, you can restart the ssh server to make the changes take effect.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service ssh restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it, happy hacking!&lt;/p&gt;</content><author><name></name></author><category term="Hardware" /><category term="Linux" /><category term="Server" /><summary type="html">Homeserver Upgrade: Odroid XU3-Lite Setup on a SD-Card</summary></entry><entry><title type="html">How to add USB Gamepad support for your Android phone or tablet</title><link href="http://localhost:4000/android/hack/hardware/2015/04/11/How_to_add_USB_Gamepad_support_for_your_Android_phone_or_tablet.html" rel="alternate" type="text/html" title="How to add USB Gamepad support for your Android phone or tablet" /><published>2015-04-11T21:41:59+02:00</published><updated>2015-04-11T21:41:59+02:00</updated><id>http://localhost:4000/android/hack/hardware/2015/04/11/How_to_add_USB_Gamepad_support_for_your_Android_phone_or_tablet</id><content type="html" xml:base="http://localhost:4000/android/hack/hardware/2015/04/11/How_to_add_USB_Gamepad_support_for_your_Android_phone_or_tablet.html">&lt;h1 id=&quot;how-to-add-usb-gamepad-support-for-your-android-phone-or-tablet&quot;&gt;How to add USB Gamepad support for your Android phone or tablet&lt;/h1&gt;

&lt;h1 id=&quot;img_20150411_201153&quot;&gt;IMG_20150411_201153&lt;/h1&gt;

&lt;p&gt;I was almost at the point to buy a playstation or xbox controller to use with my tablet, since they seem to be supported out-of-the-box. But actually I still have an old USB controller lying around, which would be more than good enough for playing some games. Interestingly my gamepad did in fact work partly, but only the left analog stick and one or two buttons, and the rest did not. My hacker spirit told me that this must be fixable somehow.&lt;/p&gt;

&lt;p&gt;So I started hacking around and added support for my old USB gamepad for my android tablet. In this post, I’ll show you how I did it and how you can to add support for any gamepad to your phone or tablet as well!&lt;/p&gt;

&lt;p&gt;First of, your tablet or phone needs to be rooted to make the changes needed to support your gamepad. But just about any device is rootable by now, so a quick search will tell you how to root it, if you haven’t done that already.&lt;/p&gt;

&lt;h1 id=&quot;prequisites&quot;&gt;Prequisites:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;rooted android device&lt;/li&gt;
  &lt;li&gt;USB-OTG cable (to connect the gamepad)&lt;/li&gt;
  &lt;li&gt;ADB&lt;/li&gt;
  &lt;li&gt;A linux computer&lt;/li&gt;
  &lt;li&gt;evtest (utility program to read raw gamepad input)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to install evtest and the android debug bridge (adb), which should be available for most linux distributions.&lt;/p&gt;

&lt;p&gt;I recommend using ADB wireless to connect to your device, so you can transfer files and type in shell commands while the gamepad is plugged in. I personnally use the open source &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.matoski.adbm&amp;amp;hl=en&quot;&gt;ADB Manager&lt;/a&gt; for that purpose.&lt;/p&gt;

&lt;p&gt;And by the way: I am not responsible if you break anything, bla bla. Changing stuff on your android device might as will break it, so proceed with caution. Also, the commands in this how-to are specific to my tablet and gamepad and you have to change them accordingly to your device and hardware.&lt;/p&gt;

&lt;h1 id=&quot;finding-the-keycodes&quot;&gt;Finding the keycodes&lt;/h1&gt;

&lt;p&gt;Android maps all gamepad keys to some internal actions. For example some gamepad key with the number 289 is mapped to the action BUTTON_X for some specific keyboard, gamepad or hair-dryer. Here’s &lt;a href=&quot;https://source.android.com/devices/input/key-layout-files.html&quot;&gt;the documentation of the keymap files&lt;/a&gt;, which will tell you a lot about how those are composed. Those keylayouts are inside &lt;em&gt;/system/usr/keylayout/&lt;/em&gt; on your android device. So all we need to do to make your gamepad compatible with android, is to create a keylayout that tells android what keys of the gamepad mean which action inside android. That means we have find the keycode and axis ids of all the buttons and map them to the android actions.&lt;/p&gt;

&lt;p&gt;First plug in your gamepad into your linux computer. After doing so, run &lt;em&gt;dmesg&lt;/em&gt; in a terminal to find out the vendor and product id of your gamepad. This will be important later.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dmesg
usb 3-1: new low-speed USB device number 10 using xhci_hcd
usb 3-1: ep 0x81 - rounding interval to 64 microframes, ep desc says 80 microframes
input: Mega World USB Game Controllers as /devices/pci0000:00/0000:00:14.0/usb3/3-1/3-1:1.0/0003:07B5:0315.0008/input/input24
hid-generic 0003:07B5:0315.0008: input,hidraw3: USB HID v1.10 Joystick [Mega World USB Game Controllers] on usb-0000:00:14.0-1/input0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this output, the important part is 07B5:0315, which are the vendor ID &lt;strong&gt;07B5&lt;/strong&gt; and the product ID &lt;strong&gt;0315&lt;/strong&gt;. Your output might look different depending on your kernel version. If you can’t figure out what’s what, you can also run &lt;em&gt;lsusb&lt;/em&gt; to get a more readable output.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lsusb
Bus 003 Device 005: ID 8087:07dc Intel Corp.
Bus 003 Device 010: ID 07b5:0315 Mega World International, Ltd
Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find out the key codes you will have to install and use the program &lt;em&gt;evtest&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To get the raw keycodes, we have to read the signals directly from /dev/input. As there are many devices inside /dev/input, you will have to try out which device is actually your gamepad. Normally it will be the last &lt;em&gt;event&lt;/em&gt; device, in my case thats /dev/input/event18.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ evtest /dev/input/event18
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now press some buttons to find out which button has which key code. Pressing a button will yield some output like that:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Event: time 1428772902.008207, type 4 (EV_MSC), code 4 (MSC_SCAN), value 90001
Event: time 1428772902.008207, type 1 (EV_KEY), code 288 (BTN_TRIGGER), value 1
Event: time 1428772902.008207, -------------- EV_SYN ------------
Event: time 1428772902.120190, type 4 (EV_MSC), code 4 (MSC_SCAN), value 90001
Event: time 1428772902.120190, type 1 (EV_KEY), code 288 (BTN_TRIGGER), value 0
Event: time 1428772902.120190, -------------- EV_SYN ------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Write down the keycode for that button, in the case above thats 288 for the A-Button, so we can later put it inside the android configuration. For me the following configuration came out. I wrote down all the Buttons that are mapped to something in android.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-04-11-How to add USB Gamepad support for your Android phone or tablet/Diagram1.png&quot;&gt;&lt;img src=&quot;/assets/2015-04-11-How to add USB Gamepad support for your Android phone or tablet/Diagram1.png&quot; alt=&quot;Diagram1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also wiggle the analog sticks first horizontally then vertically to find out the axis of each stick. In my case those where axis 0/1 for X/Y left and 2/5 for X/Y right. Using the documentation from the android website and by looking at the other keylayout files on my tablet, I created a configuration file like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#
# Mega World USB Game Controllers
#
 
key 288   BUTTON_A
key 290   BUTTON_B
key 289   BUTTON_X
key 291   BUTTON_Y
key 292   BUTTON_L1
key 294   BUTTON_R1
key 293   BUTTON_L2
key 295   BUTTON_R2
key 296   BUTTON_SELECT
key 297   BUTTON_START
key 298   BUTTON_THUMBL
key 299   BUTTON_THUMBR
 
# Left and right stick.
axis 0x00 X
axis 0x01 Y
axis 0x02 RZ
axis 0x05 Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before you put that configuration file on your device you can optionally use &lt;a href=&quot;https://source.android.com/devices/input/validate-keymaps.html&quot;&gt;the validate keymaps tool from the android sdk&lt;/a&gt; to make sure you didn’t make any mistakes creating the configuration.&lt;/p&gt;

&lt;p&gt;The configuration should now be saved to a file that includes the vendor ID and product ID of your gamepad. In my case the vendor ID is 07B5 and the product ID is 0315 so the name my configuration file is &lt;em&gt;Vendor_07b5_Product_0315.kl&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Android uses the file name to make sure to only load specific configurations for specific USB devices, so make sure those are correct.&lt;/p&gt;

&lt;h1 id=&quot;adding-the-configuration-to-your-device&quot;&gt;Adding the configuration to your device&lt;/h1&gt;

&lt;p&gt;After saving the key mapping to &lt;em&gt;Vendor_07b5_Product_0315.kl&lt;/em&gt;, we need to upload the file back onto the device. We’ll use adb for that. As described earlier, I recommend using ABD wireless so it’s easier to make changes to the configuration while the gamepad is plugged in.&lt;/p&gt;

&lt;p&gt;We put the configuration on the sdcard and move it afterwards to the correct position on the device, because we don’t have root access over adb (so we can’t move the configuration directly into the appropriate system folder)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ adb connect
$ adb push Vendor_07b5_Product_0315.kl /sdcard/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before you can move the file to the correct location you must remount the &lt;em&gt;/system&lt;/em&gt; partition, to make it writable. This may differ from device to device. Check where your &lt;em&gt;/system&lt;/em&gt; is mounted using the &lt;em&gt;mount&lt;/em&gt; command before. In my case &lt;em&gt;/system&lt;/em&gt; is mounted to &lt;em&gt;/dev/block/mmcblk0p20&lt;/em&gt;, so I remount that device read-write-able.&lt;/p&gt;

&lt;p&gt;Also make sure to allow the adb shell to become root on your tablet once you have entered the &lt;em&gt;su&lt;/em&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ adb shell
$ su
$ mount -o remount,rw /dev/block/mmcblk0p20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can copy the key layout from the sdcard into the keylayout folder:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp /sdcard/Vendor_07b5_Product_0315.kl /system/usr/keylayout/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And really important, you have to change the permissions of the file to 644 or android will not load it after the gamepad was plugged in!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ chmod 644 /system/usr/keylayout/Vendor_07b5_Product_0315.kl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can connect your gamepad to the android device and play some games to check if everything worked out. If something went wrong, you can always upload a new version of you keymap to the sdcard, move it to the system folder, change the permissions and replug your gamepad to make more tests.&lt;/p&gt;

&lt;p&gt;Once you have tested that everything works, make sure to remount the &lt;em&gt;/system&lt;/em&gt; partition back to read-only.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ mount -o remount,ro /dev/block/mmcblk0p20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now I can finally play GTA: San Andreas on my tablet using my really old cheapo USB Gamepad, which is incredibly better than the touch controls. Great.&lt;/p&gt;</content><author><name></name></author><category term="Android" /><category term="Hack" /><category term="Hardware" /><summary type="html">How to add USB Gamepad support for your Android phone or tablet</summary></entry><entry><title type="html">DIY: Black Rolls/Trigger Point-like foam rollers for myofascial release</title><link href="http://localhost:4000/handycrafts/mod/2015/03/01/DIY__Black_Rolls_Trigger_Point_like_foam_rollers_for_myofascial_release.html" rel="alternate" type="text/html" title="DIY: Black Rolls/Trigger Point-like foam rollers for myofascial release" /><published>2015-03-01T15:41:35+01:00</published><updated>2015-03-01T15:41:35+01:00</updated><id>http://localhost:4000/handycrafts/mod/2015/03/01/DIY__Black_Rolls_Trigger_Point_like_foam_rollers_for_myofascial_release</id><content type="html" xml:base="http://localhost:4000/handycrafts/mod/2015/03/01/DIY__Black_Rolls_Trigger_Point_like_foam_rollers_for_myofascial_release.html">&lt;h1 id=&quot;diy-black-rollstrigger-point-like-foam-rollers-for-myofascial-release&quot;&gt;DIY: Black Rolls/Trigger Point-like foam rollers for myofascial release&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/03/Cover-1-Black-Rolls.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-01-DIY: Black Rolls/Trigger Point-like foam rollers for myofascial release/Cover-1-Black-Rolls-300x199.png&quot; alt=&quot;Black Rolls&quot; /&gt;&lt;img src=&quot;/assets/2015-03-01-DIY: Black Rolls/Trigger Point-like foam rollers for myofascial release/Cover-2-Finished-DIY-version-300x209.png&quot; alt=&quot;Finished DIY version&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a big fan of using foam rollers for &lt;a href=&quot;https://en.wikipedia.org/wiki/Myofascial_Release&quot; title=&quot;en.wikipedia.org - myofascial release&quot;&gt;myofascial release&lt;/a&gt;, especially after workout.&lt;/p&gt;

&lt;p&gt;There are a lot of foam roller products for &lt;a href=&quot;https://en.wikipedia.org/wiki/Trigger_point&quot; title=&quot;en.wikipedia.org - trigger point&quot;&gt;myofascial trigger point&lt;/a&gt; treatment out there, but I am too cheap to buy a piece of recycled plastic pressed into a cylindrical form for 20 EUR or higher. This is one of the easiest &lt;a href=&quot;https://en.wikipedia.org/wiki/Do_it_yourself&quot; title=&quot;en.wikipedia.org - Do it yourself&quot;&gt;DIY&lt;/a&gt; projects possible, so make your own!&lt;/p&gt;

&lt;p&gt;The standard foam rollers of different sizes can be replaced with almost anything that has a similar form and supports your weight. I used &lt;a href=&quot;https://en.wikipedia.org/wiki/Polyvinyl_chloride#Pipes&quot; title=&quot;en.wikipedia.org - Polyvinyl chloride - Pipes&quot;&gt;PVC tubes&lt;/a&gt; from a hardware store nearby. Just chose your preferred diameter, cut of the flange (using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Dremel&quot; title=&quot;en.wikipedia.org - Dremel&quot;&gt;Dremel&lt;/a&gt; or a standard saw) and you are done.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/03/Flange-removed.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-01-DIY: Black Rolls/Trigger Point-like foam rollers for myofascial release/Flange-removed-257x300.png&quot; alt=&quot;Flange removed&quot; /&gt;&lt;/a&gt;Now for the back area, foam rollers exist in the form of two spheres connected in one point.&lt;/p&gt;

&lt;p&gt;The small version can easily be replicated by putting two tennis balls into &lt;a href=&quot;https://en.wikipedia.org/wiki/Nylon&quot; title=&quot;en.wikipedia.org - nylon&quot;&gt;nylon&lt;/a&gt; tights and tying a knot at the end. This might sound/look a little strange, but seriously it works well (although the tennis balls are almost a little too soft).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/03/Tennis-balls-in-nylon-tights.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-01-DIY: Black Rolls/Trigger Point-like foam rollers for myofascial release/Tennis-balls-in-nylon-tights-300x212.png&quot; alt=&quot;Tennis balls in nylon tights&quot; /&gt;&lt;/a&gt;For higher durability, add a few more nylon layers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/03/Tennis-balls-in-nylon-tights-more-layers.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-01-DIY: Black Rolls/Trigger Point-like foam rollers for myofascial release/Tennis-balls-in-nylon-tights-more-layers-300x160.png&quot; alt=&quot;Tennis balls in nylon tights - more layers&quot; /&gt;&lt;/a&gt;You can probably think of a bigger and harder version and probably find a lot of (even better) alternatives for foam rollers.&lt;/p&gt;

&lt;p&gt;Happy foam rolling!&lt;/p&gt;</content><author><name></name></author><category term="Handycrafts" /><category term="Mod" /><summary type="html">DIY: Black Rolls/Trigger Point-like foam rollers for myofascial release</summary></entry><entry><title type="html">Samsung Galaxy S3 repair – Glass screen/digitizer replacement and why it is not recommended</title><link href="http://localhost:4000/android/hack/handycrafts/hardware/2015/03/01/Samsung_Galaxy_S3_repair___Glass_screen_digitizer_replacement_and_why_it_is_not_recommended.html" rel="alternate" type="text/html" title="Samsung Galaxy S3 repair – Glass screen/digitizer replacement and why it is not recommended" /><published>2015-03-01T14:27:24+01:00</published><updated>2015-03-01T14:27:24+01:00</updated><id>http://localhost:4000/android/hack/handycrafts/hardware/2015/03/01/Samsung_Galaxy_S3_repair___Glass_screen_digitizer_replacement_and_why_it_is_not_recommended</id><content type="html" xml:base="http://localhost:4000/android/hack/handycrafts/hardware/2015/03/01/Samsung_Galaxy_S3_repair___Glass_screen_digitizer_replacement_and_why_it_is_not_recommended.html">&lt;h1 id=&quot;samsung-galaxy-s3-repair--glass-screendigitizer-replacement-and-why-it-is-not-recommended&quot;&gt;Samsung Galaxy S3 repair – Glass screen/digitizer replacement and why it is not recommended&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/03/Cover-Glass-screen-replaced.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-01-Samsung Galaxy S3 repair – Glass screen/digitizer replacement and why it is not recommended/Cover-Glass-screen-replaced-300x208.png&quot; alt=&quot;Glass screen replaced&quot; /&gt;&lt;/a&gt;A friend asked me to repair her friends &lt;a href=&quot;https://en.wikipedia.org/wiki/Samsung_Galaxy_S_III&quot; title=&quot;en.wikipedia.org - Samsung Galaxy S III&quot;&gt;Samsung Galaxy S3&lt;/a&gt; mobile phone, that had a broken glass screen/digitizer, so I had a closer look at it. The process of replacing the glass screen/digitizer on a Samsung Galaxy S3 is straight forward and not many tools are needed. However, what you really need is patience… a lot of it.&lt;/p&gt;

&lt;p&gt;This post shows how it is done and why I still would not recommend it anyway.&lt;/p&gt;

&lt;p&gt;Please note the difference between a broken glass screen/digitizer and a broken display! The display is the actual electronic part, while the glass screen/digitizer is… well, just a glass screen glued on top of the real display. A broken display can also be repaired (=replaced), but since the display essentially “is” the mobile phone (with most parts soldered onto it as &lt;a href=&quot;https://en.wikipedia.org/wiki/Surface-mount_technology&quot; title=&quot;en.wikipedia.org - surface-mount device&quot;&gt;SMD&lt;/a&gt;s) it makes no economic sense — buying a new phone would be the right way to go here.&lt;/p&gt;

&lt;p&gt;Also be advised, that these instructions can — if not applied correctly — lead to a (completely) broken and unusable phone. You do this at your own risk!&lt;/p&gt;

&lt;h1 id=&quot;replacing-the-glass-screendigitizer&quot;&gt;Replacing the glass screen/digitizer&lt;/h1&gt;

&lt;p&gt;Technically, replacing the glass screen/digitizer is very easy: all you need is the replacement part (make sure it ships with the necessary adhesive included!), a hairdryer, tweezers, alcohol (~70% ethanol) and a deck of cards (you probably get the wrong impression now, so please read on 😉 ).&lt;/p&gt;

&lt;p&gt;Simply put, the display is mounted into the casing with some industrial grade adhesive. The same adhesive is used to merge the glass screen/digitizer with the display (with a layer in between). This adhesive effect can be reduced by applying moderate heat.&lt;/p&gt;

&lt;p&gt;Start by removing the back cover and the battery. Then gently apply (moderate) heat with the hairdryer at the top front, but be careful not to heat it up too much. Then start fiddling a card from your card deck (I used a laminated business card) between the glass screen/digitzer and the case. In this initial step, it might be better to use a razor blade (be careful!) just to open the first gap to insert a card. Only use non-scratching tools (like a card) from here on to protect the display. Also make sure to start at the top front on the left side (see figure below). This is the least sensitive region of the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/03/Seperating-glass-screen-from-display.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-01-Samsung Galaxy S3 repair – Glass screen/digitizer replacement and why it is not recommended/Seperating-glass-screen-from-display-300x290.png&quot; alt=&quot;Seperating glass screen from display&quot; /&gt;&lt;/a&gt;Now work your way downwards to the bottom of the screen with the same procedure: heat up a small area of the screen and then gently push down the card a little further. Be very very patient and careful during these steps! It takes quite a long time to completely remove the glass screen/digitizer (it took me about an hour) and only a little too much pressure or not enough heat will break the display underneath, in which case the phone will be trash. Often, you can barely hear/see the display crack. If you are not sure if your display is still functional just put the battery back in and turn it on — if it is broken stop right there and save the trouble of dismantling the phone any further.&lt;/p&gt;

&lt;p&gt;Once you reach the area with the three buttons at the bottom, work your way around them. you will notice that the touch buttons are also glued to the glass screen/digitzer and connected via a flex cable. This is the most tricky part, as it is too easy to rip them off.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/03/Glass-screen-removed.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-01-Samsung Galaxy S3 repair – Glass screen/digitizer replacement and why it is not recommended/Glass-screen-removed-300x178.png&quot; alt=&quot;Glass screen removed&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, remove the black rubber seal from the fringe.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/03/Removing-rubber-seal.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-01-Samsung Galaxy S3 repair – Glass screen/digitizer replacement and why it is not recommended/Removing-rubber-seal-300x296.png&quot; alt=&quot;Removing rubber seal&quot; /&gt;&lt;/a&gt;Then remove all the adhesive that is left on the display and clean the display with ethanol and a (antistatic) cloth.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/03/Cleaned.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-01-Samsung Galaxy S3 repair – Glass screen/digitizer replacement and why it is not recommended/Cleaned-300x266.png&quot; alt=&quot;Cleaned&quot; /&gt;&lt;/a&gt;Once the display and the surrounding fringe are completely free of adhesive, place small stripes of adhesive tape (the one that was shipped with the replacement part) around the display. Fill as much surface around the display with adhesive as possible. Tweezers can be of great help here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/03/Adhesive-tape-applied.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-01-Samsung Galaxy S3 repair – Glass screen/digitizer replacement and why it is not recommended/Adhesive-tape-applied-300x204.png&quot; alt=&quot;Adhesive tape applied&quot; /&gt;&lt;/a&gt;Finally, remove all protective foil from the adhesive tape stripes and the one at the bottom of the replacement glass screen/digitizer. Make sure the display is completely free of any dirt particles and the three buttons are in place and carefully place the new glass screen/digitizer onto the display, beginning at the top using the notch for the speaker as reference point. Once the glass screen/digitizer and display are aligned perfectly, apply moderate pressure to merge both parts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/03/Cover-Glass-screen-replaced.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-01-Samsung Galaxy S3 repair – Glass screen/digitizer replacement and why it is not recommended/Cover-Glass-screen-replaced-300x208.png&quot; alt=&quot;Glass screen replaced&quot; /&gt;&lt;/a&gt;Please do not ask why the replacement is pink!^^&lt;/p&gt;

&lt;h1 id=&quot;still-working-and-why-it-is-not-recommended&quot;&gt;Still working… and why it is not recommended&lt;/h1&gt;

&lt;p&gt;This repair method is quite tricky and can easily destroy your phone. I also broke the display of the first mobile phone I tried to repair.&lt;/p&gt;

&lt;p&gt;Also, on a new device, the adhesive layer between the glass screen/digitizer and the display covers the whole display area, not only the fringe. Most standard/cheap replacements (like the method shown here) are applied with adhesive tape, rather than the liquid adhesive that also covers the display area. With the lack of that adhesive layer between glass screen/digitizer and display, a thin, empty gap between both remains. Pressing down on the screen with a little more pressure locally produces strange artifacts, much like pressing on the screen of a notebook. This by the way is an easy method to find out if the glass screen/digitizer was replaced in a cheap manner on a second hand device.&lt;/p&gt;

&lt;p&gt;While this mobile phone model is not waterproof to begin with, this repair method reduces it’s water resistance even further. The cheap adhesive tape seals the phone even worse than the original adhesive.&lt;/p&gt;

&lt;p&gt;So if the glass screen/digitizer shows only small cracks with the touch functionality still working and the display still readable, better use the phone as it is. On the other hand, if the glass screen/digitizer is severely scattered, this might be a cheap solution to make the phone working again.&lt;/p&gt;

&lt;p&gt;You have been warned!&lt;/p&gt;</content><author><name></name></author><category term="Android" /><category term="Hack" /><category term="Handycrafts" /><category term="Hardware" /><summary type="html">Samsung Galaxy S3 repair – Glass screen/digitizer replacement and why it is not recommended</summary></entry><entry><title type="html">DIY: “barefoot”/natural running shoes</title><link href="http://localhost:4000/handycrafts/mod/2015/02/28/DIY___barefoot__natural_running_shoes.html" rel="alternate" type="text/html" title="DIY: “barefoot”/natural running shoes" /><published>2015-02-28T22:06:29+01:00</published><updated>2015-02-28T22:06:29+01:00</updated><id>http://localhost:4000/handycrafts/mod/2015/02/28/DIY___barefoot__natural_running_shoes</id><content type="html" xml:base="http://localhost:4000/handycrafts/mod/2015/02/28/DIY___barefoot__natural_running_shoes.html">&lt;h1 id=&quot;diy-barefootnatural-running-shoes&quot;&gt;DIY: “barefoot”/natural running shoes&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/02/Cover-Finished-sole.png&quot;&gt;&lt;img src=&quot;/assets/2015-02-28-DIY: “barefoot”/natural running shoes/Cover-Finished-sole-300x242.png&quot; alt=&quot;Finished sole&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the end of last year I went to a sports and health fair, where I wanted to have a closer look at the available natural running shoes, especially the ones from &lt;a href=&quot;http://vibram.com/fivefingers&quot; title=&quot;Vibram.com - FiveFingers&quot;&gt;Vibram (FiveFingers)&lt;/a&gt; and &lt;a href=&quot;http://www.leguano.eu/&quot; title=&quot;leguano.eu&quot;&gt;Leguano&lt;/a&gt;. Both type of shoes were comfortable and seemed to be of good quality. However, with an above the 70 EUR price range, they are quite expensive for a shoe that aims to be like no shoe at all. In fact, they are more like a pair of high quality socks with a special thin rubber layer glued to the sole (whereas the Vibram FiveFingers also seem to have some supportive structure integrated, which is kind of a contradiction to the barefoot philosophy). Making a custom fitted version should not be that hard, so I decided to make my own.&lt;/p&gt;

&lt;p&gt;Since most ideas already exist somewhere in the internet, I found several &lt;a href=&quot;https://www.youtube.com/watch?v=WRCXy_UHPVc&quot; title=&quot;youtube.com - How To Make Minimalist Running/Climbing Shoes At Home&quot;&gt;youtube video&lt;/a&gt;s, where they were making their own pair of Vibram FiveFingers fakes. Actually, I find the separate toe sections quite annoying — not only because you can only wear them barefoot or with special socks, but also because it takes practice and more time to put them on. Not separating the toe sections makes the building process very simple.&lt;/p&gt;

&lt;p&gt;All that is needed is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a pair of high quality socks (designed for sports),&lt;/li&gt;
  &lt;li&gt;one of the available liquid rubber products (&lt;a href=&quot;http://www.plastidip.com&quot; title=&quot;plastidip.com&quot;&gt;Plasti Dip&lt;/a&gt;, &lt;a href=&quot;http://www.rustoleum.com/en/product-catalog/consumer-brands/flexidip/flexidip&quot; title=&quot;FlexiDip&quot;&gt;FlexiDip&lt;/a&gt;, &lt;a href=&quot;http://sugru.com/about/&quot; title=&quot;Sugru&quot;&gt;Sugru&lt;/a&gt;, latex milk, etc.)&lt;/li&gt;
  &lt;li&gt;a piece of cardboard big enough to place your feet on it, a pen and two plastic bags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/02/BOM.png&quot;&gt;&lt;img src=&quot;/assets/2015-02-28-DIY: “barefoot”/natural running shoes/BOM-300x283.png&quot; alt=&quot;Bill of material&quot; /&gt;&lt;/a&gt;For my version I used a Plasti Dip spray, but I would expect latex milk to give an even better result.&lt;/p&gt;

&lt;p&gt;First place your feet on the cardboard and draw their outline with a pen on the board. The outline should be the shape of your feet seen from above. Hold the pen vertically while drawing around your foot, making the contour slightly bigger than your actual foot. Do not pay too much attention to the details, just roughly match your foot’s sole. The surface of these two cardboard outlines will be transferred to the sole of your socks in the next step.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/02/Cardboard-outlines.png&quot;&gt;&lt;img src=&quot;/assets/2015-02-28-DIY: “barefoot”/natural running shoes/Cardboard-outlines-300x256.png&quot; alt=&quot;Cardboard outlines&quot; /&gt;&lt;/a&gt;Do not try to simply put on the socks and spray/paint the sole. The liquid rubber paint will soak into the textile and onto your skin. With latex milk this is no problem, but Plasti Dip should not come in contact with skin until dry. Also, several layers need to be painted. During the painting process, each layer needs to dry, which would leave you waiting with the shoes on.&lt;/p&gt;

&lt;p&gt;Now, put each cardboard outline into a plastic bag (this reduces the friction, makes the cardboard easier to place in the socks and prevents any cuts in the textile) and then carefully place them into the socks. Make sure the socks fit the cardboard perfectly, as the bottom of the socks will be painted and eventually become the sole of your new shoes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/02/Cardboard-and-plastic-bag-in-sock.png&quot;&gt;&lt;img src=&quot;/assets/2015-02-28-DIY: “barefoot”/natural running shoes/Cardboard-and-plastic-bag-in-sock-300x187.png&quot; alt=&quot;Cardboard and plastic bag in sock&quot; /&gt;&lt;/a&gt;Now you start to build up the sole of your shoes by applying the liquid rubber to the sole of the socks layer by layer. Give each layer enough time to dry (see the liquid rubber product’s user instructions). Obviously, the more layers you add, the thicker the soles of your shoes become — it is up to you.&lt;/p&gt;

&lt;p&gt;When the sole is dry and has the desired thickness, you are done. Remove the cardboard and plastic bags and try on your new shoes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/02/Finished-top.png&quot;&gt;&lt;img src=&quot;/assets/2015-02-28-DIY: “barefoot”/natural running shoes/Finished-top-291x300.png&quot; alt=&quot;Finished shoe top&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://fomori.org/blog/wp-content/uploads/2015/02/Cover-Finished-sole.png&quot;&gt;&lt;img src=&quot;/assets/2015-02-28-DIY: “barefoot”/natural running shoes/Cover-Finished-sole-300x242.png&quot; alt=&quot;Finished sole&quot; /&gt;&lt;/a&gt;Do not expect anything similar to “normal” shoes. These are just socks with a rubber sole. They are great (and quite durable) in all situations, where you would like to have a barefoot feeling while still wearing shoes. Unlike Vibram FiveFingers and Leguanos, they do not protect your foot from sharp objects on the ground, so be careful where you use them. And just as with all “barefoot”/natural running shoes, I would not recommend walking with them on hard surfaces (e.g. asphalt).&lt;/p&gt;</content><author><name></name></author><category term="Handycrafts" /><category term="Mod" /><summary type="html">DIY: “barefoot”/natural running shoes</summary></entry><entry><title type="html">QCAD – Symbols, special characters and font styles in dimension labels</title><link href="http://localhost:4000/hack/linux/software/2014/08/20/QCAD___Symbols__special_characters_and_font_styles_in_dimension_labels.html" rel="alternate" type="text/html" title="QCAD – Symbols, special characters and font styles in dimension labels" /><published>2014-08-20T18:19:20+02:00</published><updated>2014-08-20T18:19:20+02:00</updated><id>http://localhost:4000/hack/linux/software/2014/08/20/QCAD___Symbols__special_characters_and_font_styles_in_dimension_labels</id><content type="html" xml:base="http://localhost:4000/hack/linux/software/2014/08/20/QCAD___Symbols__special_characters_and_font_styles_in_dimension_labels.html">&lt;h1 id=&quot;qcad--symbols-special-characters-and-font-styles-in-dimension-labels&quot;&gt;QCAD – Symbols, special characters and font styles in dimension labels&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-08-20-QCAD – Symbols, special characters and font styles in dimension labels/Cover-QCAD-with-Alpha-and-l_ABz-dimensions.png&quot;&gt;&lt;img src=&quot;/assets/2014-08-20-QCAD – Symbols, special characters and font styles in dimension labels/Cover-QCAD-with-Alpha-and-l_ABz-dimensions.png&quot; alt=&quot;Cover - QCAD with Alpha and l_ABz dimensions&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.qcad.org/en/&quot; title=&quot;qcad.org&quot;&gt;QCAD&lt;/a&gt; is a great free and open source &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer-aided_design&quot; title=&quot;en.wikipedia.org - Computer-aided_design&quot;&gt;CAD&lt;/a&gt; software. Although limited to 2D design, it is my favorite tool for drafting, construction and simple sketches. It is &lt;a href=&quot;http://www.qcad.org/en/qcad-documentation&quot; title=&quot;qcad.org/en - qcad-documentation&quot;&gt;well documented&lt;/a&gt; overall, but one issue I could not find a solution for, was how to label dimensions with symbols, special characters or certain font styles (bold, italic, super-/subscript).&lt;/p&gt;

&lt;p&gt;This blog post provides a simple trick to get it done.&lt;/p&gt;

&lt;p&gt;If you try to label the dimension of an angle with a symbol (like “α” or “β”) for example, QCAD will only show a question mark (“?”) as a place holder:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-08-20-QCAD – Symbols, special characters and font styles in dimension labels/QCAD-with-dimension.png&quot;&gt;&lt;img src=&quot;/assets/2014-08-20-QCAD – Symbols, special characters and font styles in dimension labels/QCAD-with-dimension.png&quot; alt=&quot;QCAD with ? dimension&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get QCAD to display symbols, special characters or certain font styles (bold, italic, super-/subscript) in dimension labels, the desired label in the label text field must be provided in a certain text format:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\fFONT|b0|i0|c0|p0;LABELTEXT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;FONT – desired font; LABELTEXT – text (or symbols, etc.) to label the dimension with; “&lt;/td&gt;
      &lt;td&gt;b0&lt;/td&gt;
      &lt;td&gt;i0&lt;/td&gt;
      &lt;td&gt;c0&lt;/td&gt;
      &lt;td&gt;p0;” – each entry takes “0” or “1” to switch font styles (bold, italic, etc.)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For example (α in italic monospace for an angle dimension label):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\fMonospace|b0|i1|c0|p0;α
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-08-20-QCAD – Symbols, special characters and font styles in dimension labels/QCAD-with-Alpha-dimension.png&quot;&gt;&lt;img src=&quot;/assets/2014-08-20-QCAD – Symbols, special characters and font styles in dimension labels/QCAD-with-Alpha-dimension.png&quot; alt=&quot;QCAD with Alpha dimension&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Super- and subscript font styles are also possible by using:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\SSUPERSCRIPT^;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\S^SUBSCRIPT;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SUPERSCRIPT – text in superscript; SUBSCRIPT – text in subscript&lt;/p&gt;

&lt;p&gt;E.g., for the italic “&lt;em&gt;lABz&lt;/em&gt;” length dimension label in the above illustration that would be:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\fMonospace|b0|i1|c0|p0;l\S^ABz;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It may not be the most user friendly way to format text (the normal text tool in QCAD does a far better job), but it works.&lt;/p&gt;</content><author><name></name></author><category term="Hack" /><category term="Linux" /><category term="Software" /><summary type="html">QCAD – Symbols, special characters and font styles in dimension labels</summary></entry><entry><title type="html">Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)</title><link href="http://localhost:4000/hack/linux/programming/software/2014/08/02/Maxima__software__and_gnuplot___plot_functions_using_lines_with_symbols_on_it__workaround_.html" rel="alternate" type="text/html" title="Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)" /><published>2014-08-02T11:24:54+02:00</published><updated>2014-08-02T11:24:54+02:00</updated><id>http://localhost:4000/hack/linux/programming/software/2014/08/02/Maxima__software__and_gnuplot___plot_functions_using_lines_with_symbols_on_it__workaround_</id><content type="html" xml:base="http://localhost:4000/hack/linux/programming/software/2014/08/02/Maxima__software__and_gnuplot___plot_functions_using_lines_with_symbols_on_it__workaround_.html">&lt;h1 id=&quot;maxima-software-and-gnuplot--plot-functions-using-lines-with-symbols-on-it-workaround&quot;&gt;Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-08-02-Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)/maxima-title-workaround.png&quot;&gt;&lt;img src=&quot;/assets/2014-08-02-Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)/maxima-title-workaround.png&quot; alt=&quot;maxima-title-workaround&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am recently working on some scientific papers for which I have to visualize a lot of mathematical functions. In a good scientific paper the graphs (and visualizations in general) should be colorless and utilize dotted/dashed lines or lines with symbols on it instead of colors. This has several advantages: A colorless plot is more neutral to the reader, he/she does not get distracted by the different colors. A reader may also have a (subliminal) preference in color, so he/she pays more attention to e.g. the red curve than the yellow one, that is hardly readable on the white background anyway. This also helps to distinguish functions, if they are plotted in one diagram and printed in gray scale mode or read by color blind people. Also, if two identical functions are plotted in one diagram, using just colors will probably only show one of the functions and hide the other.&lt;/p&gt;

&lt;p&gt;I am using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_algebra_system&quot; title=&quot;wikipedia.org - CAS&quot;&gt;CAS&lt;/a&gt; software &lt;a href=&quot;http://maxima.sourceforge.net/&quot; title=&quot;maxima.sourceforge.net&quot;&gt;Maxima&lt;/a&gt; to do the calculations, which in turn uses &lt;a href=&quot;http://www.gnuplot.info/&quot; title=&quot;gnuplot.info&quot;&gt;gnuplot&lt;/a&gt; to plot the functions. Gnuplot alone does the job perfectly. However, when plotting functions (and not discrete data points) using lines with symbols on it from within Maxima (which also uses gnuplot to plot the graphs), the results are quite ugly. There seems to be no proper solution to this problem.&lt;/p&gt;

&lt;p&gt;This blog post suggests a workaround that is rather ugly, but which produces very nice graphics, that meet the above-mentioned requirements.&lt;/p&gt;

&lt;p&gt;As mentioned before, gnuplot does the job just fine, e.g.:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gnuplot&amp;gt; plot sin(x) with linespoints lc rgb &quot;black&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-08-02-Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)/gnuplot-sinx.png&quot;&gt;&lt;img src=&quot;/assets/2014-08-02-Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)/gnuplot-sinx.png&quot; alt=&quot;gnuplot-sin(x)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the equivalent is done in Maxima:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(%i1) plot2d([sin(x)], [x, -10, 10], [style, linespoints], [color, black], [legend, &quot;sin(x)&quot;])$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;, you get the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-08-02-Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)/maxima-sinx-linespoints.png&quot;&gt;&lt;img src=&quot;/assets/2014-08-02-Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)/maxima-sinx-linespoints.png&quot; alt=&quot;maxima-sin(x)-linespoints&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maxima causes gnuplot to draw a symbol (in this case a “bullet”) on each sample point it provides. To draw a smooth curve, the sample rate is (by default) quite high, which in turn results in such a high density of points. That is the reason why the line appears to be thick. That of course defeats the purpose and decreases readability instead of increasing it.&lt;/p&gt;

&lt;p&gt;You can use the “adapt_depth” option in conjunction with “nticks”, but that lowers the sampling rate and reduces the smoothness of the curve. It basically produces points that are connected through a line: mathematically speaking, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_function&quot; title=&quot;wikipedia.org - continuous function&quot;&gt;continuous&lt;/a&gt; but not &lt;a href=&quot;https://en.wikipedia.org/wiki/Differentiable&quot; title=&quot;wikipedia.org - differentiable&quot;&gt;differentiable&lt;/a&gt; function. The following gives an (extreme) example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(%i1) plot2d([sin(x)], [x, -10, 10], [style, linespoints], [color, black], [legend, &quot;sin(x)&quot;], [adapt_depth, 1], [nticks, 4])$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-08-02-Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)/maxima-sinx-linespoints-adapt_depth-nticks.png&quot;&gt;&lt;img src=&quot;/assets/2014-08-02-Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)/maxima-sinx-linespoints-adapt_depth-nticks.png&quot; alt=&quot;maxima-sin(x)-linespoints-adapt_depth-nticks&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The workaround I came up with “fakes” a line with symbols on it by simply overlaying three plots, making them look like one single smooth curve with symbols on it. The steps are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;plot the desired function “normally” with the style “lines”&lt;/li&gt;
  &lt;li&gt;create a list of points from the function and plot them on top of the “normal” function using the option “makelist”&lt;/li&gt;
  &lt;li&gt;add a “fake” point to the plot that is out of range and therefore not shown in the plot (this will give you a correct, “faked” legend on the plot)&lt;/li&gt;
  &lt;li&gt;use the option “style” and set the values to “lines” for the “normal” function, “points” for the points on it and “linespoints” for the “fake” point&lt;/li&gt;
  &lt;li&gt;now use the option “legend” and set an empty value (“”) for the function and the points on it, only naming the “fake” point after the desired function you want to plot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plot2d(
[sin(x), [discrete, makelist([x, sin(x)], x, -10, 10, 0.4)], [discrete, [20], [0]]], 
[x, -10, 10], 
[style, lines, points, linespoints], 
[color, black], 
[point_type, times], 
[legend, &quot;&quot;, &quot;&quot;, &quot;sin(x)&quot;]
)$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-08-02-Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)/maxima-sinx-linespoints-workaround.png&quot;&gt;&lt;img src=&quot;/assets/2014-08-02-Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)/maxima-sinx-linespoints-workaround.png&quot; alt=&quot;maxima-sin(x)-linespoints-workaround&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should be easier, though. I really like Maxima (and gnuplot), but this is certainly a very basic and vital feature that is missing. Anyway, the workaround gets the job done for now.&lt;/p&gt;</content><author><name></name></author><category term="Hack" /><category term="Linux" /><category term="Programming" /><category term="Software" /><summary type="html">Maxima (software) and gnuplot – plot functions using lines with symbols on it (workaround)</summary></entry></feed>